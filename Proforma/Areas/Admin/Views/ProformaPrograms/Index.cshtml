@model Proforma.DAL.ProformaProgram

@{
    ViewBag.Title = "Index";
}

<h2>Index</h2>


@using (Html.BeginForm("Index", "ProformaPrograms", FormMethod.Post, new { @id = "frmProformaPrograms" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>ProformaProgram</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @if (Request.QueryString["id"] != null)
        {
            @Html.HiddenFor(model => model.ProformaProgramId)
        }
        @Html.HiddenFor(model => model.CompanyId, new { @value = ViewBag.CompanyId })

        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}
<table class="table">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.Name)
        </th>
        <th></th>
    </tr>

    @if (null != ViewBag.proformaPrograms)
    {
        foreach (var item in ViewBag.proformaPrograms)
        {
            <tr>
                <td>
                    @item.Name
                </td>
                <td>
                    <a href="~/Admin/ProformaPrograms/Index?companyId=@item.CompanyId&id=@item.ProformaProgramId">Edit</a> |
                    @Html.ActionLink("Delete", "Delete", new { id = item.ProformaProgramId })
                </td>
            </tr>
        }
    }

</table>


<script>

  // When the browser is ready...
    $(document).ready(function () {

    // Setup form validation on the #register-form element
        $("#frmProformaPrograms").validate({

        // Specify the validation rules
        rules: {
            Description: "required",
            Name: {
                required: true,
                maxlength: 2000
            }
        },

        // Specify the validation error messages
        messages: {

        },

        submitHandler: function(form) {
            form.submit();
        }
    });

  });

</script>
